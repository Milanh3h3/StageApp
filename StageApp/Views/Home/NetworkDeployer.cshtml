<h1>NetworksDeployer</h1>
<div class="container form-container">
    <div class="row">
        <div class="col-md-6 form-section">
            @if (!string.IsNullOrEmpty(ViewBag.Message))
            {
                <div class="alert alert-success">
                    @ViewBag.Message
                </div>
            }

            @if (ViewData.ModelState.Count > 0 && !ViewData.ModelState.IsValid)
            {
                <div class="alert alert-danger">
                    <strong>Error:</strong> Please correct the errors below.
                </div>
            }
            <div id="feedback"></div>
            <p>Make sure the excel file looks like this: doe maar wat</p>
            <p>Note: multiple devices can be claimed in different networks. For longer files make sure to refresh the API Key before Confirming.</p>
            <form asp-action="NetworkDeployer" asp-controller="Home" method="post" enctype="multipart/form-data" id="NetworkDeployerForm">
                <div class="form-group">
                    <label for="ExcelFile">Upload Excel File</label>
                    <input type="file" class="form-control" id="ExcelFile" name="ExcelFile" accept=".xls,.xlsx" required />
                    <small class="form-text text-muted">Allowed file types: .xls, .xlsx</small>
                </div>
                <button type="submit" id="submitNetworkDeployer" class="btn btn-primary">Confirm NetworkDeployer</button>
            </form>
        </div>
    </div>
</div>
<script>
    const processId = '@ViewBag.ProcessId';
    // Function to get the status from the server
    function getStatus() {
        if (!processId) {
            console.warn('Process ID is not available. Skipping fetch.');
            return; // Exit the function if processId is not set
        }
        fetch(`/Home/GetStatus?processId=${processId}`)
            .then(response => response.json())
            .then(data => {
                const feedbackDiv = document.getElementById('feedback');
                if (data.status) {
                    feedbackDiv.style.display = 'block';
                    feedbackDiv.textContent = data.status;
                }
            })
            .catch(error => console.error('Error fetching status:', error));
    }

    // Wait for the DOM to load
    document.addEventListener('DOMContentLoaded', () => {
        const form = document.getElementById('NetworkDeployerForm');
        const feedbackDiv = document.getElementById('feedback');

        // Hide feedback section initially
        feedbackDiv.style.display = 'none';

        // Add a submit event listener to the form
        form.addEventListener('submit', (event) => {
            // Show the feedback div and start fetching status updates
            feedbackDiv.style.display = 'block';
            feedbackDiv.textContent = 'Uploading file and starting the deployment process...';

            // Start the periodic status fetch
            setInterval(getStatus, 1000);
        });
    });
</script>

